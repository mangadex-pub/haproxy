name: Build HAProxy version

on:
  workflow_call:
    inputs:
      DEBIAN_CODENAME:
        required: true
        type: string
      HAPROXY_FLAVOUR:
        required: true
        type: string
      HAPROXY_GITREPO:
        required: true
        type: string
      HAPROXY_VERSION:
        required: true
        type: string
      HAPROXY_GITREF:
        required: true
        type: string
      HAPROXY_DATAPLANEAPI_VERSION:
        required: true
        type: string

# For Docker publication
env:
  REGISTRY: "ghcr.io"
  IMAGE_NAME: "${{ github.repository }}"

jobs:
  regtests:
    runs-on: ubuntu-latest
    container: "docker.io/library/debian:${{ inputs.DEBIAN_CODENAME }}"
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup OS
        uses: "./.github/actions/setup-os"
      - name: Fetch build-time dependencies
        uses: "./.github/actions/fetch-deps"
      - name: Build and test
        continue-on-error: true
        run: |
          make -C haproxy \
            HAPROXY_GITREPO="${{ inputs.HAPROXY_GITREPO }}" \
            HAPROXY_VERSION="${{ inputs.HAPROXY_VERSION }}" \
            HAPROXY_GITREF="${{ inputs.HAPROXY_GITREF }}" \
            BUILD_PATCHES_DIR="patches-${{ inputs.HAPROXY_FLAVOUR }}" \
            build test

  dataplaneapi:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Build Dataplane API
        run: |
          make deps/dataplaneapi DATAPLANEAPI_VERSION=${{ inputs.HAPROXY_DATAPLANEAPI_VERSION }}
      - name: Archive binary tarball
        uses: actions/upload-artifact@v4
        with:
          name: dataplaneapi-${{ inputs.HAPROXY_FLAVOUR }}.tar.gz
          path: deps/dataplaneapi/dataplaneapi-dist.tar.gz

  dist-binary:
    runs-on: ubuntu-latest
    container: "docker.io/library/debian:${{ inputs.DEBIAN_CODENAME }}"
    permissions:
      contents: read
      packages: write
    needs: [ dataplaneapi, regtests ]
    strategy:
      matrix:
        dist_type: [ bin, deb ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup OS
        uses: "./.github/actions/setup-os"
      - name: Fetch build-time dependencies
        uses: "./.github/actions/fetch-deps"

      # Standalone as it's version-dependent
      - name: Dependencies - Fetch - Data Plane API
        uses: actions/download-artifact@v4
        with:
          name: dataplaneapi-${{ inputs.HAPROXY_FLAVOUR }}.tar.gz
          path: deps/dataplaneapi
      - name: Dependencies - Unpack - Data Plane API
        shell: bash
        run: |
          mkdir -pv deps/dataplaneapi/dist
          tar -C deps/dataplaneapi/dist -xf deps/dataplaneapi/dataplaneapi-dist.tar.gz

      - name: Build distribution
        env:
          BUILD_MESSAGE: "${{ github.event.head_commit.message }}"
        run: |
          make -C haproxy \
            HAPROXY_GITREPO="${{ inputs.HAPROXY_GITREPO }}" \
            HAPROXY_VERSION="${{ inputs.HAPROXY_VERSION }}" \
            HAPROXY_GITREF="${{ inputs.HAPROXY_GITREF }}" \
            BUILD_PATCHES_DIR="patches-${{ inputs.HAPROXY_FLAVOUR }}" \
            dist-${{ matrix.dist_type }}
          ls -l haproxy

      - name: Archive binary tarball
        if: ${{ matrix.dist_type == 'bin' }}
        uses: actions/upload-artifact@v4
        with:
          name: haproxy-${{ inputs.HAPROXY_FLAVOUR }}.tar.gz
          path: haproxy/haproxy-dist.tar.gz

      - name: Collect Debian packages
        if: ${{ matrix.dist_type == 'deb' }}
        run: |
          echo "DEB_BIN=$(ls -1 haproxy/haproxy-dbgsym_*.deb | cut -d'/' -f2)" | tee -a $GITHUB_ENV
          echo "DEB_DBG=$(ls -1 haproxy/haproxy_*.deb | cut -d'/' -f2)" | tee -a $GITHUB_ENV
      - name: Archive Debian packages - binary
        if: ${{ matrix.dist_type == 'deb' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DEB_BIN }}
          path: haproxy/${{ env.DEB_BIN }}
      - name: Archive Debian packages - debug symbols
        if: ${{ matrix.dist_type == 'deb' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DEB_DBG }}
          path: haproxy/${{ env.DEB_DBG }}

  dist-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [ dataplaneapi, dist-binary, regtests ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Fetch build-time dependencies
        uses: "./.github/actions/fetch-deps"
        with:
          INSTALL_NATIVE_DEPS: "false"

      # Standalone as it's version-dependent
      - name: Dependencies - Fetch - Data Plane API
        uses: actions/download-artifact@v4
        with:
          name: dataplaneapi-${{ inputs.HAPROXY_FLAVOUR }}.tar.gz
          path: deps/dataplaneapi
      - name: Dependencies - Unpack - Data Plane API
        shell: bash
        run: |
          mkdir -pv deps/dataplaneapi/dist
          tar -C deps/dataplaneapi/dist -xf deps/dataplaneapi/dataplaneapi-dist.tar.gz

      - name: Fetch HAProxy dist
        uses: actions/download-artifact@v4
        with:
          name: haproxy-${{ inputs.HAPROXY_FLAVOUR }}.tar.gz
          path: haproxy

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,event=push,enable=true,prefix=branch-{{ branch }}-${{ inputs.HAPROXY_VERSION }}-git-,format=short
            type=sha,event=push,enable={{ is_default_branch }},prefix=${{ inputs.HAPROXY_VERSION }}-git-,format=short
            type=raw,event=push,enable={{ is_default_branch }},value=${{ inputs.HAPROXY_VERSION }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

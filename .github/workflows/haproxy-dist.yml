name: Build HAProxy version

on:
  workflow_call:
    inputs:
      CLANG_VERSION:
        required: true
        type: number
      HAPROXY_FLAVOUR:
        required: true
        type: string
      HAPROXY_GITREPO:
        required: true
        type: string
      HAPROXY_VERSION:
        required: true
        type: string
      HAPROXY_GITREF:
        required: true
        type: string

# For Docker publication
env:
  REGISTRY: "ghcr.io"
  IMAGE_NAME: "${{ github.repository }}"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Dependencies - Fetch - LUA
        uses: actions/download-artifact@v3
        with:
          name: lua-dist.tar.gz
          path: deps/lua
      - name: Dependencies - Unpack - LUA
        run: |
          mkdir -pv deps/lua/dist
          tar -C deps/lua/dist -xf deps/lua/lua-dist.tar.gz

      - name: Dependencies - Fetch - PCRE2
        uses: actions/download-artifact@v3
        with:
          name: pcre2-dist.tar.gz
          path: deps/pcre2
      - name: Dependencies - Unpack - PCRE2
        run: |
          mkdir -pv deps/pcre2/dist
          tar -C deps/pcre2/dist -xf deps/pcre2/pcre2-dist.tar.gz

      - name: Dependencies - Fetch - QuicTLS
        uses: actions/download-artifact@v3
        with:
          name: quictls-dist.tar.gz
          path: deps/quictls
      - name: Dependencies - Unpack - QuicTLS
        run: |
          mkdir -pv deps/quictls/dist
          tar -C deps/quictls/dist -xf deps/quictls/quictls-dist.tar.gz

      - name: Dependencies - Fetch - VTest
        uses: actions/download-artifact@v3
        with:
          name: vtest-dist.tar.gz
          path: deps/vtest
      - name: Dependencies - Unpack - VTest
        run: |
          mkdir -pv deps/vtest/dist
          tar -C deps/vtest/dist -xf deps/vtest/vtest-dist.tar.gz

      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: "${{ inputs.CLANG_VERSION }}"

      - name: Install build dependencies
        run: |
          sudo apt update && sudo apt install -y \
            bzip2 \
            devscripts \
            debhelper \
            pkg-config \
            libpcre2-dev \
            libreadline-dev \
            libsystemd-dev \
            zlib1g-dev

      - name: Build and test
        continue-on-error: true
        run: |
          make -C haproxy \
            HAPROXY_GITREPO="${{ inputs.HAPROXY_GITREPO }}" \
            HAPROXY_VERSION="${{ inputs.HAPROXY_VERSION }}" \
            HAPROXY_GITREF="${{ inputs.HAPROXY_GITREF }}" \
            BUILD_PATCHES_DIR="patches-${{ inputs.HAPROXY_FLAVOUR }}" \
            build test

      - name: Package binary distribution
        run: |
          make -C haproxy \
            HAPROXY_GITREPO="${{ inputs.HAPROXY_GITREPO }}" \
            HAPROXY_VERSION="${{ inputs.HAPROXY_VERSION }}" \
            HAPROXY_GITREF="${{ inputs.HAPROXY_GITREF }}" \
            BUILD_PATCHES_DIR="patches-${{ inputs.HAPROXY_FLAVOUR }}" \
            dist-bin
      - name: Archive binary tarball
        uses: actions/upload-artifact@v3
        with:
          name: haproxy-${{ inputs.HAPROXY_FLAVOUR }}.tar.gz
          path: haproxy/haproxy-dist.tar.gz

      - name: Build Debian package
        id: debian
        env:
          BUILD_MESSAGE: "${{ github.event.head_commit.message }}"
        run: |
          make -C haproxy \
            HAPROXY_GITREPO="${{ inputs.HAPROXY_GITREPO }}" \
            HAPROXY_VERSION="${{ inputs.HAPROXY_VERSION }}" \
            HAPROXY_GITREF="${{ inputs.HAPROXY_GITREF }}" \
            BUILD_PATCHES_DIR="patches-${{ inputs.HAPROXY_FLAVOUR }}" \
            dist-deb
          ls -l haproxy
          echo "DEB_BIN=$(ls -1 haproxy/*.deb | cut -d'/' -f2)" | tee -a $GITHUB_ENV
          echo "DEB_DBG=$(ls -1 haproxy/*.ddeb | cut -d'/' -f2)" | tee -a $GITHUB_ENV
      - name: Archive Debian packages - binary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.DEB_BIN }}
          path: haproxy/${{ env.DEB_BIN }}
      - name: Archive Debian packages - debug symbols
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.DEB_DBG }}
          path: haproxy/${{ env.DEB_DBG }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,event=push,enable=true,prefix=branch-{{ branch }}-${{ inputs.HAPROXY_VERSION }}-${{ inputs.HAPROXY_FLAVOUR }}-git-,format=short
            type=sha,event=push,enable={{ is_default_branch }},prefix=${{ inputs.HAPROXY_VERSION }}-${{ inputs.HAPROXY_FLAVOUR }}-git-,format=short
            type=raw,event=push,enable={{ is_default_branch }},value=${{ inputs.HAPROXY_VERSION }}-${{ inputs.HAPROXY_FLAVOUR }}
            type=raw,event=push,enable={{ is_default_branch }},value=${{ inputs.HAPROXY_VERSION }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
